{"version":3,"file":"static/js/897.6d22c8de.chunk.js","mappings":"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","sources":["webpack://react/./src/common/ContentBlock/ContentBlock.module.css?810a","common/ContentBlock/ContentBlock.tsx","common/FormsControls/FormsControls.tsx","component/pages/login/LoginForm.tsx","component/pages/login/Login.tsx","component/pages/login/LoginContainer.tsx","utils/validator/validators.ts","webpack://react/./src/common/FormsControls/FormsControls.module.css?9c32"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ContentBlock_content__Yh26t\"};","import style from \"./ContentBlock.module.css\"\r\nimport React, { FC } from \"react\"\r\nexport type ContentBlockType = {\r\n    children: Array<JSX.Element> | JSX.Element\r\n    isDarkTheme: boolean\r\n}\r\nlet ContentBlock: FC<ContentBlockType> = ({ children, isDarkTheme }) => {\r\n    let styleFon = isDarkTheme ?\r\n        { backgroundColor: \"#424242\", border: '1px solid rgba(255, 255, 255, 0.08)', color: \"#fff\", } :\r\n        { backgroundColor: \"#fff\", border: '1px solid rgba(0, 0, 0, 0.16)' }\r\n\r\n    return (<div style={styleFon} className={style.content}>\r\n        {children}\r\n    </div>)\r\n}\r\nexport default ContentBlock","import { Field } from \"redux-form\"\r\nimport style from \"./FormsControls.module.css\"\r\nimport React, { FC } from \"react\"\r\nimport { FielddValidatorType } from \"../../utils/validator/validators\"\r\nimport { join } from \"../../utils/function\"\r\ntype FormcontrolTYpe = {\r\n    children: React.ReactNode\r\n    meta: {\r\n        touched: boolean\r\n        error: string\r\n    }\r\n}\r\nconst Formcontrol: FC<FormcontrolTYpe> = (props) => {\r\n    const { meta: { touched, error }, children } = props\r\n    // деструктурезация {input,meta,...props}\r\n    // мы берем отдельно input,meta, а все оставшиеся штуки оставляем в пропсах\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={join([hasError ? style.error : \"\", style.form_Control])}>\r\n            {children}\r\n            {hasError && <span className={style.error_text}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    return (<Formcontrol {...props} >\r\n        <textarea {...props.input} {...props} />\r\n    </Formcontrol>)\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    return (<Formcontrol {...props} >\r\n        <input {...props.input} {...props} />\r\n    </Formcontrol>)\r\n}\r\n\r\nexport function createField<KeysType extends string>(placeholder: string, name: KeysType,\r\n    validators: Array<FielddValidatorType>,\r\n    component: string | React.Component | React.FC,\r\n    props = {}, text = \"\"): any {\r\n    return (<div className={style.row}>\r\n        <Field name={name} component={component}\r\n            placeholder={placeholder}\r\n            validate={validators}\r\n            {...props}\r\n        />\r\n        {text}\r\n    </div>)\r\n}","import { reduxForm } from \"redux-form\"\r\nimport { createField, Input } from \"../../../common/FormsControls/FormsControls\"\r\nimport { maxLenghtCreator, required } from \"../../../utils/validator/validators\"\r\nimport styleFormsControl from \"./../../../common/FormsControls/FormsControls.module.css\"\r\nimport React, { FC, useEffect, useState } from \"react\"\r\nimport Preloader from \"../../../common/Preloader/Preloader\"\r\nimport BaseButton from \"../../../common/Button/BaseButton\"\r\nimport style from \"./Login.module.css\"\r\nimport { Form } from \"formik\"\r\nimport { Formik } from \"formik\"\r\n\r\nconst maxLenght50 = maxLenghtCreator(50)\r\ntype LoginFormPropsType = {\r\n    isShowCapcha: boolean\r\n    isWaitingCapcha: boolean\r\n    errorLogin: string\r\n    capchaUrl: string\r\n    handleSubmit: () => void\r\n}\r\nexport type LoginFormFieldType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captha?: string\r\n}\r\ntype LoginFormFieldTypeKeys = Extract<keyof LoginFormFieldType, string>\r\nconst LoginForm: FC<LoginFormPropsType> = ({ handleSubmit, errorLogin, capchaUrl, isShowCapcha, isWaitingCapcha }) => {\r\n    // let isSubmit= isShowCapcha || capchaUrl.length > 0 ? \r\n    let [error, setError] = useState(errorLogin)\r\n    useEffect((()=>{\r\n        if(error!==errorLogin){\r\n            console.log(\"error\",error)\r\n            setError(errorLogin)}\r\n    }),[errorLogin])\r\n    return (\r\n        <Formik initialValues={{ password: \"\", email: \"\", rememberMe: false, captha: '' }} onSubmit={() => { handleSubmit() }}             >\r\n            <Form>\r\n                {createField<LoginFormFieldTypeKeys>(\"Login\", 'email', [required, maxLenght50], Input)}\r\n                {createField<LoginFormFieldTypeKeys>(\"Password\", 'password', [required, maxLenght50],\r\n                    Input, { type: \"password\" })}\r\n\r\n                {createField<LoginFormFieldTypeKeys>(null, 'rememberMe', [],\r\n                    'input', { type: \"checkbox\" }, \"Remember me\")}\r\n               \r\n\r\n                {isShowCapcha || capchaUrl.length > 0 ?\r\n                    <>\r\n                        Капча\r\n                        <Preloader isFetching={isWaitingCapcha} />\r\n                        <img src={capchaUrl} alt=\"capchaUrl\" />\r\n                        {createField<LoginFormFieldTypeKeys>(\"captha\", 'captha', [required, maxLenght50],\r\n                            Input, { type: \"text\" })}\r\n                        {/* Введите почту, пароль и капчу */}\r\n                    </> : null}\r\n                {error && <div className={styleFormsControl.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <BaseButton\r\n                    type=\"submit\" value=\"Login\" onClick={() => { }} />\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<LoginFormFieldType, LoginFormPropsType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nexport default ReduxLoginForm","import { Navigate } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport ReduxLoginForm, { LoginFormFieldType } from \"./LoginForm\"\r\nimport ContentBlock from \"../../../common/ContentBlock/ContentBlock\"\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: LoginFormFieldType) => {\r\n        console.log(\"submit\",formData)\r\n        const captha = formData.captha ? formData.captha : \"\"\r\n        props.logintMe(formData.email, formData.password,\r\n            formData.rememberMe, captha\r\n        )\r\n    }\r\n    if (props.isAuth) {\r\n        return <Navigate to=\"/profile\" />\r\n    }\r\n    return (\r\n        <ContentBlock isDarkTheme={props.isDarkTheme}>\r\n            <h1>Login</h1>\r\n            <ReduxLoginForm {...props} onSubmit={onSubmit} />\r\n        </ContentBlock>\r\n        // <div className={style.content}>\r\n\r\n        // </div>\r\n    )\r\n}\r\nexport default Login","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport { logintMe, getCapchaUrl } from \"../../../redux/auth-reducer\"\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\"\r\nimport { AppReducerType } from \"../../../redux/redux-store\";\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    capchaUrl: string\r\n    isWaitingCapcha: boolean\r\n    isShowCapcha: boolean\r\n    isDarkTheme: boolean\r\n    errorLogin: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getCapchaUrl: () => void\r\n    logintMe: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype propsType = MapStateToPropsType & MapDispatchToPropsType\r\nclass LoinContainer extends React.Component<propsType> {\r\n    componentDidMount() {\r\n        this.props.getCapchaUrl()\r\n    }\r\n    render() {\r\n        return (<Login {...this.props} />)\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppReducerType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        capchaUrl: state.auth.capchaUrl,\r\n        isWaitingCapcha: state.auth.isWaitingCapcha,\r\n        isShowCapcha: state.auth.isShowCapcha,\r\n        isDarkTheme: state.app.isDarkTheme,\r\n        errorLogin: state.auth.errorLogin\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType>(mapStateToProps, { logintMe, getCapchaUrl }),\r\n)(LoinContainer)","export type FielddValidatorType = (value: string) => string | undefined | boolean\r\n\r\nexport const required: FielddValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is Required \"\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght: number): FielddValidatorType => (value) => {\r\n    if (value && value.length > maxLenght) return `Max lenght is ${maxLenght} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const checkTextEmpty = (value: string): string  => {\r\n    const textWithoutLetters = value.replace(/[\\n\\r]/g, '')\r\n    if (textWithoutLetters.length === 0 && value.length > 0)\r\n        return \"Don't post empty space\"\r\n    if (textWithoutLetters.length === 0 && value.length === 0)\r\n        return \"Don't post empty post\"\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__H-NWe\",\"error_text\":\"FormsControls_error_text__y-h0q\",\"formSummaryError\":\"FormsControls_formSummaryError__ejpt0\",\"row\":\"FormsControls_row__ijpOL\",\"form_Control\":\"FormsControls_form_Control__Xa4ZO\"};"],"names":["children","styleFon","isDarkTheme","backgroundColor","border","color","style","className","Formcontrol","props","meta","touched","error","hasError","join","Textarea","input","Input","createField","placeholder","name","validators","component","text","validate","maxLenght50","maxLenghtCreator","reduxForm","form","handleSubmit","errorLogin","capchaUrl","isShowCapcha","isWaitingCapcha","useState","setError","useEffect","console","log","initialValues","password","email","rememberMe","captha","onSubmit","required","type","length","Preloader","isFetching","src","alt","styleFormsControl","BaseButton","value","onClick","isAuth","to","ContentBlock","formData","logintMe","LoinContainer","this","getCapchaUrl","React","compose","connect","state","auth","app","maxLenght","checkTextEmpty","textWithoutLetters","replace"],"sourceRoot":""}